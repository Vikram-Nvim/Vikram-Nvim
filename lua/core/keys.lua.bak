local map = vim.api.nvim_set_keymap
local default_opts = { noremap = true, silent = true }
local expr_opts = { noremap = true, expr = true, silent = true }

--NOTE: Insert Mode
map("i", "<C-h>", "<Left>", default_opts)
map("i", "<C-l>", "<Right>", default_opts)
map("i", "<C-j>", "<Down>", default_opts)
map("i", "<C-k>", "<Up>", default_opts)
map("i", "<C-s>", "<cmd> w <CR>", default_opts)
map("i", "<C-c>", "<ESC>", default_opts)
map("i", "<Tab>", "<cmd>bnext<CR>", default_opts)
-- map("i", "<S-Tab>", "<cmd>bprev<CR>", default_opts)
map("i", "<S-Tab>", "<cmd>vsplit<CR>", default_opts)
-- map("i", "< - > ", "<cmd>split<CR>", default_opts)

--NOTE: Normal Mode
map("n", ";", ":", default_opts) 
map("n", "<C-s>", "<cmd> w <CR>", default_opts) 
map("n", "<C-c>", "<cmd> %y+ <CR>", default_opts)
map("n", "<C-d>", "<C-d>zz", default_opts)
map("n", "<C-u>", "<C-u>zz", default_opts)
map("n", "n", "nzzzv", default_opts)
map("n", "N", "Nzzzv", default_opts)
map("n", "<Tab>", "<cmd>bnext<CR>", default_opts)
map("n", "<S-Tab>", "<cmd>vsplit<CR>", default_opts)
-- map("n", "<S-Tab>", "<cmd>bprev<CR>", default_opts)
-- map("n", "< - > ", "<cmd>split<CR>", default_opts)

--NOTE: Terminal
map('n', '<A-t>', '<CMD>lua require("FTerm").toggle()<CR>', default_opts)
map('t', '<A-t>', '<C-\\><C-n><CMD>lua require("FTerm").toggle()<CR>', default_opts)

--NOTE: Files
map("n", "-", "<CMD>lua MiniFiles.open()<CR>", { desc = "Files" })
-- map("n", "-", "<CMD>Oil<CR>", { desc = "Files" })
--
--
--NOTE: Which Key Config
local wk = require("which-key")
local opts = {
  mode = {'n', 'v'},
  prefix = "<leader>",
  buffer = nil,
  silent = true,
  noremap = true,
  nowait = false,
}

local mappings = {
  --NOTE: Dashboard
  -- ["D"] = { "<cmd>Dashboard<CR>", "Dashboard" },

  --NOTE: Actions
  ["w"] = { "<cmd>update!<CR>", "Save" },
  ["q"] = { "<cmd>q!<CR>", "Quit" },
  ["x"] = { "<cmd>bd!<CR>", "Close Buffer" },
  ["X"] = { "<cmd>%bd|e#|bd#<CR>", "Close all Buffer" },
  ["/"] = { "<ESC><cmd>lua require('Comment.api').toggle.linewise(vim.fn.visualmode())<CR>", "Comment Toggle" },

  ["<leader>"] = { "=ap", "Format" },


  --NOTE: Neotree
  ["e"] = { "<cmd>Neotree focus<CR>", "NeoTree" },
  ["c"] = { "<cmd>Neotree close<CR>", "Neotree Close" },
  ["c"] = { "<cmd>Ex<CR>", "" },
  --
  --NOTE: Terminal
  ["<A-t>"] = { '<CMD>lua require("FTerm").toggle()<CR>', "Terminal" },
  ["<A-t>"] = { '<C-\\><C-n><CMD>lua require("FTerm").toggle()<CR>', "Terminal" },

  --NOTE: File Browser
  -- ["-"] = { "<CMD>Oil<CR>", "Files" },
  ["-"] = { "<CMD>lua MiniFiles.open()<CR>", "Files" },

  --NOTE: Ufo Folds
  ["a"] = { "za", "Toggle Fold" },
  ["A"] = { "zA", "Toggle Folds" },

  --NOTE: LazyGit
  ["g"] = { "<cmd>LazyGit<CR>", "LazyGit" },

  --NOTE: TreeJS
  ["m"] = { "<cmd>lua require('treesj').toggle()<CR>", "TSJ Toggle" },

  --NOTE: Spell 
  -- ["="] = { "z=", "Spelling Suggestions" },

  --NOTE: Nav Buddy 
  ["N"] = { "<CMD>Navbuddy<CR>", "Nav Buddy" },

  --NOTE: Zoxide
  ["Z"] = { require("telescope").extensions.zoxide.list, "zoxide find" },

  --NOTE: Pick Color 
  ["C"] = { "<CMD>PickColor<CR>", "Pick Color" },

  z = {
    name = "Lazy",
    z = { "<cmd>Lazy<cr>", "Lazy" },
    c = { "<cmd>Lazy check<cr>", "Check" },
    C = { "<cmd>Lazy clean<cr>", "Clean" },
    i = { "<cmd>Lazy install<cr>", "Install" },
    s = { "<cmd>Lazy sync<cr>", "Sync" },
    S = { "<cmd>Lazy status<cr>", "Status" },
    u = { "<cmd>Lazy update<cr>", "Update" },
    r = { "<cmd>Lazy restore<cr>", "Restore" },
  },

  --NOTE: Telescope
  f = {
    name = "Telescope",
    p = { "<cmd>Telescope project<CR>", "Find Projects" },
    P = { "<cmd>Telescope planets<CR>", "Find Planets" },
    t = { "<cmd>Telescope themes<CR>", "Themes" },
    h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
    k = { "<cmd>Telescope keymaps<cr>", "Find Keymaps" },
    f = { "<cmd>Telescope find_files<cr>", "Find Files" },
    s = { "<cmd>Telescope builtin<cr>", "Find Select Telescope" },
    w = { "<cmd>Telescope grep_string<cr>", "Find Current Word" },
    g = { "<cmd>Telescope live_grep<cr>", "Find by Grep" },
    d = { "<cmd>Telescope diagnostics<cr>", "Find Diagonostics" },
    r = { "<cmd>Telescope resume<cr>", "Find Resume" },
    u = { "<cmd>Telescope oldfiles<cr>", "Find Recent Files" },
    b = { "<cmd>Telescope buffers<cr>", "Find Existing Buffers" },
    m = { "<cmd>Telescope media_files<CR>", "Find Media Files" },
  },

  a = {
    name = "ChatGPT",
    o = { "<cmd>ChatGPT<CR>", "ChatGPT Open" },
    a = { "<cmd>ChatGPTActAs<CR>", "ChatGPT ActAs" },
    e = { "<cmd>ChatGPTEditWithInstructions<CR>", "ChatGPT Edit w Ins" },
  },

  d = {
    name = "Debugger",
    b = { "<cmd>DapToggleBreakpoint<CR>", "Toggle Breakpoint" },
    c = { "<cmd>DapContinue<CR>", "Continue" },
    o = { "<cmd>DapStepOver<CR>", "Step Over" },
    i = { "<cmd>DapStepInto<CR>", "Step Into" },
    s = { "<cmd>DapShowLog<CR>", "Log" },
    t = { "<cmd>DapTerminate<CR>", "Terminate" },
    u = { "<cmd>lua require('dapui').toggle()<CR>", "Toggle Dap UI" },
  },

  h = {
    name = "Harpoon",
    m = { "<cmd>lua require('harpoon.mark').add_file()<cr>", "Mark" },
    o = { "<cmd>lua require('harpoon.ui').toggle_quick_menu()<cr>", "Open" },
    p = { "<cmd>lua require('harpoon.ui').nav_next()<cr>", "Previos" },
    n = { "<cmd>lua require('harpoon.ui').nav_prev()<cr>", "Next" },
    f = { "<cmd>lua require('harpoon.ui').nav_file(1)<cr>", "First" },
  },

  t = {
    name = "TSTools",
    o = { "<cmd>TSToolsOrganizeImports<cr>", "Organize" },
    s = { "<cmd>TSToolsSortImports<cr>", "Sort" },
    r = { "<cmd>TSToolsRemoveUnusedImports<cr>", "Remove Unused" },
    R = { "<cmd>TSToolsRemoveUnused<cr>", "Remove Unused Statement" },
    a = { "<cmd>TSToolsAddMissingImports<cr>", "Add Missing Imports" },
    f = { "<cmd>TSToolsFixAll<cr>", "Fix Errors" },
    d = { "<cmd>TSToolsGoToSourceDefinition<cr>", "Source Definition" },
    r = { "<cmd>TSToolsRenameFile<cr>", "Rename File" },
    R = { "<cmd>TSToolsFileReferences<cr>", "Find File References" },
  },

  o = {
    name = "Obsodian",
    n = { "<cmd>ObsidianNew<CR>", "Create New <Create>" },
    o = { "<cmd>ObsidianOpen<CR>", "Open <Title>" },
    s = { "<cmd>ObsidianQuickSwitch<CR>", "Quick Switch" },
    S = { "<cmd>ObsidianSearch<CR>", "Search <Name>" },
    c = { "<cmd>ObsidianToggleCheckbox<CR>", "Toggle Checkbox" },
    f = { "<cmd>ObsidianFollowLink<CR>", "Follow Link" },
    b = { "<cmd>ObsidianBacklinks<CR>", "Back Links" },
    t = { "<cmd>ObsidianTags<CR>", "Tag [Tag]" },
    T = { "<cmd>ObsidianToday<CR>", "Today <Day>" },
    y = { "<cmd>ObsidianYesterday<CR>", "Yesterday" },
    Y = { "<cmd>ObsidianTomorrow<CR>", "Tomorrow" },
    x = { "<cmd>ObsidianTemplate<CR>", "Template <Name>" },
    l = { "<cmd>ObsidianLink<CR>", "Link <Name>" },
    L = { "<cmd>ObsidianLinkNew<CR>", "New Link <Name>" },
    v = { "<cmd>ObsidianLinks<CR>", "Links" },
    r = { "<cmd>ObsidianRename<CR>", "Rename <New Name>" },
    e = { "<cmd>ObsidianExtractNote<CR>", "Extract Selected to New" },
    w = { "<cmd>ObsidianWorkspace<CR>", "Switch Workspace <Name>" },
    p = { "<cmd>ObsidianPasteImg<CR>", "Pase Img <Img Name>" },
  },

  T = {
    name = "Trouble",
    d = { "<cmd>Trouble diagnostics toggle<cr>", "Diagonostics" },
    b = { "<cmd>Trouble diagnostics toggle filter.buf=0<cr>", "Buffer Diagonostics" },
    s = { "<cmd>Trouble symbols toggle focus=false<cr>", "Symbols" },
    r = { "<cmd>Trouble lsp toggle focus=false win.position=right<cr>", "Definitions / References" },
    l = { "<cmd>Trouble loclist toggle<cr>", "Location List" },
    q = { "", "Quickfix List" },
  },

  S = {
    name = "Sessions",
    s = { "<cmd>SessionSave<cr>", "Save" },
    r = { "<cmd>SessionRestore<cr>", "Restore" },
    d = { "<cmd>SessionDelete<cr>", "Delete" },
    f = { "<cmd>Autosession search<cr>", "Find" },
    D = { "<cmd>Autosession delete<cr>", "Find and Delete" },
  },

  l = {
    name = "Lsp",
    k = { vim.lsp.buf.hover, "Hover" },
    r = { vim.lsp.buf.rename, "Rename" },
    d = { vim.lsp.buf.definition, "Definition" },
    f = { vim.lsp.buf.references, "References" },
    c = { vim.lsp.buf.code_action, "Code Action" },
  },

  -- C = {
    --   name = "Colortils",
    --   p = { "<CMD>Colortils picker<CR>", "Picker" },
    --   l = { "<CMD>Colortils lighten<CR>", "Lighten" },
    --   d = { "<CMD>Colortils darken<CR>", "Darken" },
    --   g = { "<CMD>Colortils greyscale<CR>", "Greyscale" },
    --   G = { "<CMD>Colortils gradient<CR>", "Gradient" },
    --   L = { "<CMD>Colortils css list<CR>", "List CSS Colors" },
    -- },

  }
  wk.register(mappings, opts)
